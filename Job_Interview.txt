# Java
******
- How does the same Java coe run on multiple operating systems?
+ The output of the compilation of Java code generates bytecode and JVM interprets bytecode. Because
  JVM has implementations form many different operating systems the bytecode is transformed into the
  different implementations which is going to be used specific to that system.
  
- What does the final keyword do?
+ final makes a class unable to be a subclass. final prevents subclassing.
+ final prevents a method to be overwritten, and makes a variable assignable only for once.
+ In general, final prevents update of the class fields and methods and prevents subclassing.
+ final variable values are no known at compile time, and this differs it from the constant.
+ final does not mean a variable is completely immutable. If a final modifier is put in front of the
  reference type, the object that variable refers to cannot be changed, but the properties of that
  object itself can be changed.

- What is the difference between an interface and an abstract class?
+ Question can be asked both on C# and Java or any OOP Class-based language. The biggest difference
  is that abstract base class can have instance methods, which allows you to have a default behaviour,
  while an interface can declare constants in interface methods, but it can provide and implementation
  for those methods.
+ Abstract class, like a regular class, can hav fields and methods as well such as private, protected
  members.
+ Abstract Class can be preferred when you want a default implementation for all subclasses.
  
# C#
****
- What are all classes in C# derived from?
+ object (equals, toString,...)

- What is a delegate?
+ Delegate in C# is a special type that defines a method signature. An instance of a delegate type can be
  assigned to any method with a compatible signature, and the assigned method can be called through the
  delegate instance.
+ Function Pointers in C, (but typesafe?), delegates vs. Java (subscriber model), Design Patterns(Observer)
+ Delegates passed methods as parameters, some .NET classes using delegate easier like action.

- Describe how generics work in C#.
+ Think about what generics do and how they're implemented in C#.
+ Generics are actually a type of polymorhpism called parametric polymorphism (don't mention this keyword!)
+ Generics allow you to write a class or method that does not specify the exact type for one or more its
  parameters, until the class or method is used(runtime). Classic examples like a list or a stack are good
  to use here to further show your knowledge of the subject.
+ It is a god idea to talk about how generics allow code reuse, while preserving typesafety. Generics are
  implemented in C# in such a way that the genericness is preserved all the way to the bytecode that is
  generated.
+ Implementation differences of the generics in C#, Java and C++.

# OOP
*****
- What is encapsulation?
+ Data hiding, restricting access to data.
+ Encapsulation let classes to be loosely coupled and with encapsulation, data is exposed only when you
  want to share it with other classes.
+ With encapsulation, the operation implementations can be hide on the same place where data exists. Thus,
  the modification or any operation that applies to data is hided.
+ The hided implementation and the data itself located under the same class, it is also known as cohesion.

- What is polymorphism?
+ Polymorphism is the structure that when classes have different functionality, while sharing the same interface. 
+ http://simpleprogrammer.com/2013/01/13/so-you-think-you-can-polymorph/
+ Polymorphism is the ability for classes to behave different for a functionality for the same interface. With
  polymorphism, implementations of the same interface used by different classes are hided, and thus used without
  need of the implementation details.

- What is composition?
+ When an object is made up of other types. A composition class is a mixture of other class instances. 
+ A simple example is, a class that have other class instances in its fields is a composition class, and the
  composition class has 'has a' relationship with the other classes which it is made of. 
+ The difference between the composition and the inheritance based on the relationship of the classes. Composition
  class has a 'has a' relation ship while the inheritace class has a 'is a' relationship.

- What is a design pattern?
+ A design pattern is a solution to a common software problem that generally occurs in differen situations in
  software development. It is more of a template for solving a problem, rather than a specific implementation.
+ The idea behind the design pattern is to give a common vocabulary, that can communicate a large amount of
  information with a few words about software designs.
+ With the design patterns, software developers have a list of solution template specific for a problem space.

- What is a singleton pattern?
+ The purpose of singleton pattern is restricting the instantiation of a class to a single instance, thus
  there can only one instance of a singleton class in the system (JVM).
+ The unnecessary and incorrect use of singleton pattern can also be considered as an anti-pattern.

- What are some design patterns you have used?
+ Observer pattern when I need a subscriber-publisher relationship between the classes. Factory pattern for 
  creating instances, also builder. Mostly I've used creational design patterns (I want to cry and burn my CV)
  
#SQL
****
- What is the having clause in SQL?
+ A classic example of when to use this would be, if you wanted to create a query to list all customers in their
  order count for all customers that have an order count greater than 3.
+ http://www.w3schools.com/sql/sql_having.asp

- What is normalization and denormalization?
+ Normalization is where we try to eliminate duplication of data and dependency. A good example of this would be
  taking the mailing address and pysical address fields out of the table and replacing them with a reference to
  an address table. So that when a customer has the same mailing and physical address, it can refer to one row
  in the address table and not have to duplicate the data.
  
  Denormalization is just the opposite. When we denormalize the database, we're usually trying to increase the
  performance by duplicating some data or storing it together. A good example of this would be taking the customer
  name and shipping address and putting it into the orders table. Even though we could just reference the customer
  table and address table. By denormalizing the data, we don't have to do any joins when processing the orders.
  
- What are the difference types of joins in SQL?
+ The two big ones here are inner and outer joins. And usually, you get bonus points for naming some others.
  The inner join is just a join where we're taking two tables and getting a result of rows that match the join
  predicate from both tables.
  
  The join predicate is just a clause used to oin tables together, usually a column from one table matching a
  column from another table. And outer join is a join where one or both of the tables will include all rows,
  even if the join predicate is not satisfied.
  
  If we have a left outer join, the table on the left hand side will always have a row in the result that
  for each row it contains, even if there is no match in the right table. The right tables columsn will just
  be null.
  
  The right outer join is just the opposite and the full outer join means that both sies will contain all rows.
  
  The other type of join is cross join,which is just a partition product of the rows from the tables and the
  join. This means that the result set will contain a row for each combination of every row in the first
  table and every row in the second table.
  
  There are other types of joins but these are the most common that are usually expected as an answer to this
  question.

#Personal
*********
- Why are you looking for other opportunities?
+ There are several variations of this question but usually, the interviewer is trying to get an idea of
  under what circumstances you might be leaving your current job, so they can know what to expect if they
  hire you. It makes when you think about it but many cancidates don't think about it and say how bad
  their current job is or current boss is. You don't ever want to talk unfavorably about your current
  employer to your perspective employer. Most companies don't want to hire someone that they feel is not
  going to stick around enough to pay for the investment of training them and bringing them on board.
  They want to return on their money.
  
  A good way to answer to this question is to talk about things that attracted you specifically to this
  job or company and to mention that you don't have any problems with your current position or team. (lies,
  lies, lies, it's more like to talk about your ex-girlfriend while getting a date, dont be a retro-scumbag)
  
- What are your strengths? What are your weaknesses?
+ It's very hard to answer those questions because it is easy to come off arrogant. And if you don't have
  a good answer here, you may be selling yourself short. I found that a good way to approach this question
  is to try to be confident and have a realistic view of yourself but not ot make it seem like you have
  something to prove or that you're bragging. It's definitely a delicate balance but it's worth thinking
  about this ahead of time.
  
  You can usually anticipate that when someone asked, what are your strengths, that the next question
  is going to be: what are your weaknesses? So you can actually set up a good answer to both of these
  questions.  So you can actually set up a good answer to both of these questions by knowing that
  many attributes of a person can be seen as a strength or weakness, depending on the situations.

  Let's say that you are a perfectionist. This could either be a strenght or weakness, depending on the
  situation. If you are trying to deliver the highest quality product possible. This perfectionism can be
  called attention to detail. The same attribute can be mentioned in the question about weaknesses by
  saying that your attention to detail, because it helps you make sure you check your work and don't do
  things sloppily can be a weakness as well because you tend to be a perfectionist and sometimes will spend
  extra time on something that is already more than good enough. Just don't make the mistake of listing some
  major character flaw as your weakness, making that your win points for being completely transparent.

- Give an example of a time you had a disagreement with a coworker and how it was resolved.