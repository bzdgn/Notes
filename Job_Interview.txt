# Java
******
- How does the same Java coe run on multiple operating systems?
+ The output of the compilation of Java code generates bytecode and JVM interprets bytecode. Because
  JVM has implementations form many different operating systems the bytecode is transformed into the
  different implementations which is going to be used specific to that system.
  
- What does the final keyword do?
+ final makes a class unable to be a subclass. final prevents subclassing.
+ final prevents a method to be overwritten, and makes a variable assignable only for once.
+ In general, final prevents update of the class fields and methods and prevents subclassing.
+ final variable values are no known at compile time, and this differs it from the constant.
+ final does not mean a variable is completely immutable. If a final modifier is put in front of the
  reference type, the object that variable refers to cannot be changed, but the properties of that
  object itself can be changed.

- What is the difference between an interface and an abstract class?
+ Question can be asked both on C# and Java or any OOP Class-based language. The biggest difference
  is that abstract base class can have instance methods, which allows you to have a default behaviour,
  while an interface can declare constants in interface methods, but it can provide and implementation
  for those methods.
+ Abstract class, like a regular class, can hav fields and methods as well such as private, protected
  members.
+ Abstract Class can be preferred when you want a default implementation for all subclasses.
  
# C#
****
- What are all classes in C# derived from?
+ object (equals, toString,...)

- What is a delegate?
+ Delegate in C# is a special type that defines a method signature. An instance of a delegate type can be
  assigned to any method with a compatible signature, and the assigned method can be called through the
  delegate instance.
+ Function Pointers in C, (but typesafe?), delegates vs. Java (subscriber model), Design Patterns(Observer)
+ Delegates passed methods as parameters, some .NET classes using delegate easier like action.

- Describe how generics work in C#.
+ Think about what generics do and how they're implemented in C#.
+ Generics are actually a type of polymorhpism called parametric polymorphism (don't mention this keyword!)
+ Generics allow you to write a class or method that does not specify the exact type for one or more its
  parameters, until the class or method is used(runtime). Classic examples like a list or a stack are good
  to use here to further show your knowledge of the subject.
+ It is a god idea to talk about how generics allow code reuse, while preserving typesafety. Generics are
  implemented in C# in such a way that the genericness is preserved all the way to the bytecode that is
  generated.
+ Implementation differences of the generics in C#, Java and C++.

# OOP
*****
- What is encapsulation?
+ Data hiding, restricting access to data.
+ Encapsulation let classes to be loosely coupled and with encapsulation, data is exposed only when you
  want to share it with other classes.
+ With encapsulation, the operation implementations can be hide on the same place where data exists. Thus,
  the modification or any operation that applies to data is hided.
+ The hided implementation and the data itself located under the same class, it is also known as cohesion.

- What is polymorphism?
+ Polymorphism is the structure that when classes have different functionality, while sharing the same interface. 
+ http://simpleprogrammer.com/2013/01/13/so-you-think-you-can-polymorph/
+ Polymorphism is the ability for classes to behave different for a functionality for the same interface. With
  polymorphism, implementations of the same interface used by different classes are hided, and thus used without
  need of the implementation details.

- What is composition?
+ When an object is made up of other types. A composition class is a mixture of other class instances. 
+ A simple example is, a class that have other class instances in its fields is a composition class, and the
  composition class has 'has a' relationship with the other classes which it is made of. 
+ The difference between the composition and the inheritance based on the relationship of the classes. Composition
  class has a 'has a' relation ship while the inheritace class has a 'is a' relationship.

- What is a design pattern?
+ A design pattern is a solution to a common software problem that generally occurs in differen situations in
  software development. It is more of a template for solving a problem, rather than a specific implementation.
+ The idea behind the design pattern is to give a common vocabulary, that can communicate a large amount of
  information with a few words about software designs.
+ With the design patterns, software developers have a list of solution template specific for a problem space.

- What is a singleton pattern?
+ The purpose of singleton pattern is restricting the instantiation of a class to a single instance, thus
  there can only one instance of a singleton class in the system (JVM).
+ The unnecessary and incorrect use of singleton pattern can also be considered as an anti-pattern.

- What are some design patterns you have used?
+ Observer pattern when I need a subscriber-publisher relationship between the classes. Factory pattern for 
  creating instances, also builder. Mostly I've used creational design patterns (I want to cry and burn my CV)
  
